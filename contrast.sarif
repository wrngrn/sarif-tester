{
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Contrast Assess",
          "organization": "Contrast Security, Inc.",
          "informationUri": "https://www.contrastsecurity.com",
          "rules": [
            {
              "id": "crypto-bad-mac",
              "name": "Insecure Hash Algorithms",
              "helpUri": "https://www.contrastsecurity.com",
              "properties": {
                "cwe": "https://cwe.mitre.org/data/definitions/328.html",
                "likelihood": "Medium",
                "references": "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
                "owasp": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
                "impact": "Medium",
                "confidence level": 1,
                "custom recommendation": {
                  "text": "{{!-- begin SCW integration block --}} {{#header}}Secure Code Warrior\n{{#omitted}} Integration{{/omitted}}{{/header}} {{#paragraph}}Learn more\nabout {{#focus}}Insecure Hash Algorithms{{/focus}} vulnerabilities over\non the Secure Code Warrior platform by watching videos and completing\ntraining exercises and missions that focus on secure\ncoding.{{/paragraph}}  {{#unorderedList}}     {{#listElement}}\n{{#linkExternal}}https://portal.securecodewarrior.com/?utm_source=partner-integration:contrast&amp;partner_id=contrast#/contextual-microlearning/web/crypto/algorithm$$LINK_DELIM$$Secure\nCode Warrior: Insecure Hash Algorithms Training{{/linkExternal}}\n{{/listElement}}               {{#listElement}}\n{{#linkExternal}}https://media.securecodewarrior.com/v2/module_78_weak_crypto_algorithm.mp4$$LINK_DELIM$$Secure\nCode Warrior: Insecure Hash Algorithms Video{{/linkExternal}}\n{{/listElement}}  {{/unorderedList}}          {{#blockQuote}}\n{{#grayedData}}                 {{#focus}}Use of Weak\nHash{{/focus}}{{{nl}}}                 The product uses an algorithm\nthat produces a digest (output value) that does not meet security\nexpectations for a hash function that allows an adversary to reasonably\ndetermine the original input (preimage attack), find another input that\ncan produce the same hash (2nd preimage attack), or find multiple inputs\nthat evaluate to the same hash (birthday attack).\n{{/grayedData}}         {{/blockQuote}}  {{!-- end SCW integration block --}}",
                  "formattedTextVariables": {},
                  "formattedText": "{{!-- begin SCW integration block --}} {{#header}}Secure Code Warrior\n{{#omitted}} Integration{{/omitted}}{{/header}} {{#paragraph}}Learn more\nabout {{#focus}}Insecure Hash Algorithms{{/focus}} vulnerabilities over\non the Secure Code Warrior platform by watching videos and completing\ntraining exercises and missions that focus on secure\ncoding.{{/paragraph}}  {{#unorderedList}}     {{#listElement}}\n{{#linkExternal}}https://portal.securecodewarrior.com/?utm_source=partner-integration:contrast&amp;partner_id=contrast#/contextual-microlearning/web/crypto/algorithm$$LINK_DELIM$$Secure\nCode Warrior: Insecure Hash Algorithms Training{{/linkExternal}}\n{{/listElement}}               {{#listElement}}\n{{#linkExternal}}https://media.securecodewarrior.com/v2/module_78_weak_crypto_algorithm.mp4$$LINK_DELIM$$Secure\nCode Warrior: Insecure Hash Algorithms Video{{/linkExternal}}\n{{/listElement}}  {{/unorderedList}}          {{#blockQuote}}\n{{#grayedData}}                 {{#focus}}Use of Weak\nHash{{/focus}}{{{nl}}}                 The product uses an algorithm\nthat produces a digest (output value) that does not meet security\nexpectations for a hash function that allows an adversary to reasonably\ndetermine the original input (preimage attack), find another input that\ncan produce the same hash (2nd preimage attack), or find multiple inputs\nthat evaluate to the same hash (birthday attack).\n{{/grayedData}}         {{/blockQuote}}  {{!-- end SCW integration block --}}"
                },
                "category": "Cryptography"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "crypto-bad-mac",
          "level": "note",
          "message": {
            "text": "'md5' hash algorithm used at /application/node_modules/pg/lib/utils.js"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node:events"
                },
                "region": {
                  "startLine": 513
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Connection.emit ()"
                }
              ]
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg/lib/utils.js"
                          },
                          "region": {
                            "startLine": 133
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg/lib/utils.js"
                          },
                          "region": {
                            "startLine": 137
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg/lib/client.js"
                          },
                          "region": {
                            "startLine": 167
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg/lib/client.js"
                          },
                          "region": {
                            "startLine": 150
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg/lib/client.js"
                          },
                          "region": {
                            "startLine": 166
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "node:events"
                          },
                          "region": {
                            "startLine": 513
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg/lib/connection.js"
                          },
                          "region": {
                            "startLine": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg-protocol/dist/parser.js"
                          },
                          "region": {
                            "startLine": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "/application/node_modules/pg-protocol/dist/index.js"
                          },
                          "region": {
                            "startLine": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "node:events"
                          },
                          "region": {
                            "startLine": 513
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "\n\nCryptography is hard. There are lots of little mistakes you can make in your cryptosystem that can leak information, or\nworse - but choosing a known unsafe hashing algorithm can be a big mistake. This is why we wanted to alert you to the presence\nof a hashing algorithm being used that doesn't meet our standards.\nObviously, there are lots of times when a hashing algorithm like MD5 or SHA-1 is used in a way that doesn't represent realistic\nrisk to your organization. However, if you find yourself needing to switch hashing algorithms, doing it in the code is\nvery easy; data migration is a much bigger problem. Here's code that gets a http://en.wikipedia.org/wiki/MD5$$LINK_DELIM$$MD5\ndigester, which is considered broken by today's standards because it's not nearly as collision-resistant as\nonce thought:\n\n  var unsafeHash = crypto.createHash('md5'); // Unsafe!\n \nThe following code retrieves a http://en.wikipedia.org/wiki/SHA-2$$LINK_DELIM$$SHA-256 cipher, which is\nconsidered much stronger for many reasons (including a 256-bit hash, which is less likely to fall victim\nto a http://en.wikipedia.org/wiki/Birthday_attack$$LINK_DELIM$$birthday attack):\n  var saferHash = crypto.createHash('sha256'); // Safe!\n \n\nAttacks against unsafe digests are more than theoretical; undirected collisions can be found on an average laptop in a few\nseconds. Directed collisions can be generated with relatively modest resources. That being said, all practical attacks would seem\nto require cryptographers of rare quality and the resources of a mid-large sized organization. Therefore, you should carefully\ndecide how likely you are to face such an attack when estimating the severity of this issue.\nThere is a common saying in cryptography (attributed to the NSA), \"Attacks always get better; they never get worse.\"\nMake your cryptographic design accordingly!"
              }
            }
          ],
          "properties": {
            "severity": "MEDIUM",
            "substatus": "",
            "uuid": "REDA-CTED-REDA-CTED",
            "status": "Reported"
          }
        }
      ]
    }
  ]
}
